Problem :

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers
 within the 32-bit signed integer range: [−231,  231 − 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

INT_MAX is +2147483647. Value of INT_MIN is -2147483648




Solution:

class Solution {
    public int reverse(int x) {
        
        int result = 0;
        
        while (x != 0)
        {
            int rem = x%10;
            x = x/10;

             //OverFLow condition 
            if((result == (Integer.MAX_VALUE / 10) && rem > 7) || (result > (Integer.MAX_VALUE / 10)))
                return 0;
            if((result == (Integer.MIN_VALUE / 10) && rem < -8) ||(result < (Integer.MIN_VALUE / 10)))
                return 0;
            
            result = result*10 + rem;
            
        }
        return result;
    }
}